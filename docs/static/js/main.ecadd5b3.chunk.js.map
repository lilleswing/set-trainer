{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","img","onClick","ALL_CARDS","CATEGORIES","BoardRandomizer","updateRight","updateWrong","this","i","Math","floor","random","length","fname","key","queryCard1","queryCard2","answer","decoys","d","tableCards","shuffle","decoyCard","Object","keys","randomCard","values","arr","retval","allAnswers","thisAnswer","j","push","curVal","piece","getOther","cards","myAnswer","myCard","answerFromArray","c1","c2","fname1","slice","fname2","vars1","split","vars2","pickDifferent","answerCard","closeCards","getCloseAnswers","concat","removeDuplicates","category","v1","v2","myCat","deepCopy","o","JSON","parse","stringify","array","temporaryValue","randomIndex","currentIndex","categories","chances","myCategory","App","useState","Date","getTime","scoreboard","setScoreboard","br","newScoreboard","now","alert","randomTwoCards","myCard1","myCard2","possibleAnswers","getOtherCards","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ecadd5b3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n    return (\n        <div className={\"card\"}>\n            <img alt=\"\" src={props.img} onClick={props.onClick}/>\n        </div>\n    )\n}\n\nexport default Card;","import React, {useState} from 'react';\nimport './App.css';\nimport Card from \"./Card\";\n\nlet ALL_CARDS = [\n    \"green-double-outline-capsule.jpg\",\n    \"green-double-outline-diamond.jpg\",\n    \"green-double-outline-squiggle.jpg\",\n    \"green-double-solid-capsule.jpg\",\n    \"green-double-solid-diamond.jpg\",\n    \"green-double-solid-squiggle.jpg\",\n    \"green-double-stripes-capsule.jpg\",\n    \"green-double-stripes-diamond.jpg\",\n    \"green-double-stripes-squiggle.jpg\",\n    \"green-single-outline-capsule.jpg\",\n    \"green-single-outline-diamond.jpg\",\n    \"green-single-outline-squiggle.jpg\",\n    \"green-single-solid-capsule.jpg\",\n    \"green-single-solid-diamond.jpg\",\n    \"green-single-solid-squiggle.jpg\",\n    \"green-single-stripes-capsule.jpg\",\n    \"green-single-stripes-diamond.jpg\",\n    \"green-single-stripes-squiggle.jpg\",\n    \"green-triple-outline-capsule.jpg\",\n    \"green-triple-outline-diamond.jpg\",\n    \"green-triple-outline-squiggle.jpg\",\n    \"green-triple-solid-capsule.jpg\",\n    \"green-triple-solid-diamond.jpg\",\n    \"green-triple-solid-squiggle.jpg\",\n    \"green-triple-stripes-capsule.jpg\",\n    \"green-triple-stripes-diamond.jpg\",\n    \"green-triple-stripes-squiggle.jpg\",\n    \"purple-double-outline-capsule.jpg\",\n    \"purple-double-outline-diamond.jpg\",\n    \"purple-double-outline-squiggle.jpg\",\n    \"purple-double-solid-capsule.jpg\",\n    \"purple-double-solid-diamond.jpg\",\n    \"purple-double-solid-squiggle.jpg\",\n    \"purple-double-stripes-capsule.jpg\",\n    \"purple-double-stripes-diamond.jpg\",\n    \"purple-double-stripes-squiggle.jpg\",\n    \"purple-single-outline-capsule.jpg\",\n    \"purple-single-outline-diamond.jpg\",\n    \"purple-single-outline-squiggle.jpg\",\n    \"purple-single-solid-capsule.jpg\",\n    \"purple-single-solid-diamond.jpg\",\n    \"purple-single-solid-squiggle.jpg\",\n    \"purple-single-stripes-capsule.jpg\",\n    \"purple-single-stripes-diamond.jpg\",\n    \"purple-single-stripes-squiggle.jpg\",\n    \"purple-triple-outline-capsule.jpg\",\n    \"purple-triple-outline-diamond.jpg\",\n    \"purple-triple-outline-squiggle.jpg\",\n    \"purple-triple-solid-capsule.jpg\",\n    \"purple-triple-solid-diamond.jpg\",\n    \"purple-triple-solid-squiggle.jpg\",\n    \"purple-triple-stripes-capsule.jpg\",\n    \"purple-triple-stripes-diamond.jpg\",\n    \"purple-triple-stripes-squiggle.jpg\",\n    \"red-double-outline-capsule.jpg\",\n    \"red-double-outline-diamond.jpg\",\n    \"red-double-outline-squiggle.jpg\",\n    \"red-double-solid-capsule.jpg\",\n    \"red-double-solid-diamond.jpg\",\n    \"red-double-solid-squiggle.jpg\",\n    \"red-double-stripes-capsule.jpg\",\n    \"red-double-stripes-diamond.jpg\",\n    \"red-double-stripes-squiggle.jpg\",\n    \"red-single-outline-capsule.jpg\",\n    \"red-single-outline-diamond.jpg\",\n    \"red-single-outline-squiggle.jpg\",\n    \"red-single-solid-capsule.jpg\",\n    \"red-single-solid-diamond.jpg\",\n    \"red-single-solid-squiggle.jpg\",\n    \"red-single-stripes-capsule.jpg\",\n    \"red-single-stripes-diamond.jpg\",\n    \"red-single-stripes-squiggle.jpg\",\n    \"red-triple-outline-capsule.jpg\",\n    \"red-triple-outline-diamond.jpg\",\n    \"red-triple-outline-squiggle.jpg\",\n    \"red-triple-solid-capsule.jpg\",\n    \"red-triple-solid-diamond.jpg\",\n    \"red-triple-solid-squiggle.jpg\",\n    \"red-triple-stripes-capsule.jpg\",\n    \"red-triple-stripes-diamond.jpg\",\n    \"red-triple-stripes-squiggle.jpg\"\n];\nlet CATEGORIES = [\n    ['red', 'green', 'purple'],\n    ['single', 'double', 'triple'],\n    ['solid', 'stripes', 'outline'],\n    ['diamond', 'squiggle', 'capsule']\n];\n\nexport class BoardRandomizer {\n    constructor(updateRight, updateWrong) {\n        this.updateRight = updateRight;\n        this.updateWrong = updateWrong;\n    }\n\n    randomCard() {\n        const i = Math.floor(Math.random() * ALL_CARDS.length);\n        return <Card img={\"labeled/\" + ALL_CARDS[i]}\n                     fname={ALL_CARDS[i]}\n                     key={ALL_CARDS[i]}\n                     onClick={this.updateWrong}/>\n    };\n\n    removeDuplicates(queryCard1, queryCard2, answer, decoys) {\n        let d = {};\n        let tableCards = {};\n        for (const card of [queryCard1, queryCard2, answer]) {\n            tableCards[card.props.fname] = true;\n        }\n        decoys = shuffle(decoys);\n        d[answer.props.fname] = answer;\n        for (const decoyCard of decoys) {\n            if (Object.keys(d).length >= 6) {\n                continue\n            }\n            if (decoyCard.props.fname in tableCards) {\n                continue\n            }\n            tableCards[decoyCard.props.fname] = true;\n            d[decoyCard.props.fname] = decoyCard;\n        }\n        while (Object.keys(d).length < 6) {\n            let decoyCard = this.randomCard();\n            if (decoyCard.props.fname in tableCards) {\n                continue\n            }\n            tableCards[decoyCard.props.fname] = true;\n            d[decoyCard.props.fname] = decoyCard;\n        }\n        return shuffle(Object.values(d));\n    };\n\n    answerFromArray(arr) {\n        let retval = \"\";\n        for (let i = 0; i < arr.length; i++) {\n            if (i !== 0) {\n                retval += \"-\";\n            }\n            retval += arr[i];\n        }\n        retval += \".jpg\";\n        return retval;\n    };\n\n\n    getCloseAnswers(arr) {\n        let allAnswers = [];\n        for (let i = 0; i < arr.length; i++) {\n            let thisAnswer = [];\n            for (let j = 0; j < arr.length; j++) {\n                if (i !== j) {\n                    thisAnswer.push(arr[j]);\n                } else {\n                    let curVal = arr[j];\n                    let piece = getOther(CATEGORIES[i], curVal);\n                    thisAnswer.push(piece);\n                }\n            }\n            allAnswers.push(thisAnswer);\n        }\n        let cards = [];\n        for (const myAnswer of allAnswers) {\n            let myCard = <Card img={\"labeled/\" + this.answerFromArray(myAnswer)}\n                               fname={this.answerFromArray(myAnswer)}\n                               onClick={this.updateWrong}\n                               key={this.answerFromArray(myAnswer)}/>;\n            cards.push(myCard);\n        }\n        return cards;\n    };\n\n\n    randomTwoCards() {\n        let c1 = this.randomCard();\n        let c2 = this.randomCard();\n        while (c1.props.fname === c2.props.fname) {\n            c2 = this.randomCard();\n        }\n        return [c1, c2];\n    };\n\n\n    getOtherCards(c1, c2) {\n        let fname1 = c1.props.fname.slice(0, -4);\n        let fname2 = c2.props.fname.slice(0, -4);\n        let vars1 = fname1.split('-');\n        let vars2 = fname2.split('-');\n\n        let answer = [];\n        for (let i = 0; i < 4; i++) {\n            if (vars1[i] === vars2[i]) {\n                answer.push(vars1[i]);\n                continue\n            }\n            let piece = pickDifferent(CATEGORIES[i], vars1[i], vars2[i]);\n            answer.push(piece);\n        }\n        let answerCard = <Card img={\"labeled/\" + this.answerFromArray(answer)}\n                               fname={this.answerFromArray(answer)}\n                               onClick={this.updateRight}\n                               key={\"correctAnswer\"}/>;\n        let closeCards = this.getCloseAnswers(answer);\n        closeCards = closeCards.concat([this.randomCard(),\n            this.randomCard(), this.randomCard()]);\n        return this.removeDuplicates(c1, c2, answerCard, closeCards);\n    }\n\n}\n\nfunction pickDifferent(category, v1, v2) {\n    for (const myCat of category) {\n        if (myCat !== v1 && myCat !== v2) {\n            return myCat\n        }\n    }\n}\n\n\nfunction deepCopy(o) {\n    return JSON.parse(JSON.stringify(o))\n}\n\n\nlet shuffle = function (array) {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n};\n\nfunction getOther(categories, curVal) {\n    let chances = [];\n    for (const myCategory of categories) {\n        if (myCategory !== curVal) {\n            chances.push(myCategory)\n        }\n    }\n    chances = shuffle(chances);\n    return chances[0]\n}\n\nfunction App() {\n    const [scoreboard, setScoreboard] = useState({\n        \"correct\": 0,\n        \"wrong\": 0,\n        \"startTime\": new Date().getTime() / 1000,\n        \"solveTime\": -1,\n    });\n\n\n    let updateRight = function () {\n        let newScoreboard = deepCopy(scoreboard);\n        newScoreboard['correct'] = newScoreboard['correct'] + 1;\n        if (newScoreboard['correct'] === 1) {\n            newScoreboard[\"startTime\"] = new Date().getTime() / 1000;\n        }\n        if (newScoreboard['correct'] === 20) {\n            let now = new Date().getTime() / 1000;\n            newScoreboard['solveTime'] = now - newScoreboard['startTime'];\n        }\n        setScoreboard(newScoreboard);\n    };\n\n    let updateWrong = function () {\n        let newScoreboard = deepCopy(scoreboard);\n        alert(\"DWIGHT YOU IGNORANT SLUT\");\n        newScoreboard['wrong'] = newScoreboard['wrong'] + 1;\n        setScoreboard(newScoreboard);\n    };\n\n    let br = new BoardRandomizer(updateRight, updateWrong);\n    const [myCard1, myCard2] = br.randomTwoCards();\n    const possibleAnswers = br.getOtherCards(myCard1, myCard2);\n\n    return (\n        <div className=\"App\">\n            <div className=\"board\">\n                <div className='rowC'>\n                    {myCard1}\n                    {myCard2}\n                    <div className={\"scoreBoard\"}>\n                        <h1 className={\"hr\"}> Race To 20! </h1>\n                        <h5>Match The Top Two Cards</h5>\n                        <p>\n                            Correct: {scoreboard['correct']}\n                            <br/>\n                            Wrong: {scoreboard['wrong']}\n                            {scoreboard['solveTime'] !== -1 &&\n                            <h1>Total Time: {scoreboard['solveTime']}</h1>\n                            }\n                        </p>\n                    </div>\n                </div>\n                <div className='rowC'>\n                    {[possibleAnswers[0], possibleAnswers[1], possibleAnswers[2]]}\n                </div>\n                <div className='rowC'>\n                    {[possibleAnswers[3], possibleAnswers[4], possibleAnswers[5]]}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}